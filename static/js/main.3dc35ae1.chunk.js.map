{"version":3,"sources":["components/usCurrent.js","components/stateCurrentFiltered.js","components/statesCurrent.js","components/constants.js","App.js","serviceWorker.js","index.js"],"names":["UsCurrent","props","console","log","state","us_current","fetch","then","res","json","data","setState","catch","this","length","myData","labels","datasets","label","backgroundColor","borderColor","borderWidth","Object","values","map","affected","className","positive","negative","posNeg","death","total","options","title","display","text","fontSize","legend","position","React","Component","StateCurrentFiltered","stateCode","state_current","date_selected","dateSelected","date_selected_formatted","dateSelectedFormatted","url","splice","pending","states","e","value","yesterday","addDays","Date","StatesCurrent","handleChange","selectedOption","startDate","handleDateChange","bind","date","moment","format","formatDate","autosize","onChange","placeholderText","selected","name","dateFormat","maxDate","key","App","Length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.3dc35ae1.chunk.js","sourcesContent":[" // src/components/usCurrent.js\r\n\r\n import React from 'react'\r\n import {Bar} from 'react-chartjs-2';\r\n \r\n class UsCurrent extends React.Component {\r\n    constructor(props) {\r\n        console.log(\"constructor called\")\r\n        super(props);\r\n        this.state = {us_current: []\r\n        };\r\n      }\r\n\r\n      componentDidMount() {\r\n        fetch('https://covidtracking.com/api/us')\r\n        .then(res => res.json())\r\n        .then((data) => {\r\n          this.setState({ us_current: data })\r\n          console.log(this.state.us_current)\r\n        })\r\n        .catch(console.log)\r\n      }\r\n\r\n    render() {\r\n        // console.log( Object.values(this.props.us_current[0]));\r\n        if (!this.state.us_current || !this.state.us_current.length) {\r\n            return \"Loading...\";\r\n        }\r\n        let myData = {\r\n            labels: ['Positive', 'Negative', 'PosNegative',\r\n            'Pending', 'Death','Total'],\r\n            datasets: [\r\n                {\r\n                  label: '# of people',\r\n                  backgroundColor: 'rgba(75,192,192,1)',\r\n                  borderColor: 'rgba(0,0,0,1)',\r\n                  borderWidth: 2,\r\n                  data: Object.values(this.state.us_current[0])\r\n                }\r\n              ]\r\n        };\r\n        return (\r\n            <div>\r\n              <center><h1>US Current Affected List</h1></center>\r\n              {this.state.us_current.map((affected) => (\r\n                <div className=\"card\">\r\n                  <div className=\"card-body\">\r\n                    <h5 className=\"card-text\">Positive:  {affected.positive}</h5>\r\n                    <h5 className=\"card-text\">Negative:  {affected.negative}</h5>\r\n                    <h5 className=\"card-text\">PosNegative:  {affected.posNeg}</h5>\r\n                    <h5 className=\"card-text\">Death:  {affected.death}</h5>\r\n                    <h5 className=\"card-text\">Total:  {affected.total}</h5>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n \r\n             <Bar\r\n               data={myData}\r\n               options={{\r\n                 title:{\r\n                   display:true,\r\n                   text:'Covid-19 current status',\r\n                   fontSize:20\r\n                 },\r\n                 legend:{\r\n                   display:true,\r\n                   position:'right'\r\n                 }\r\n               }}\r\n             />\r\n           </div>\r\n          )\r\n    }\r\n  }\r\n\r\n  export default UsCurrent","import React from 'react'\r\nimport { Bar } from 'react-chartjs-2';\r\nimport moment from 'moment';\r\n\r\nclass StateCurrentFiltered extends React.Component {\r\n  constructor(props) {\r\n    console.log(\"constructor called,with stateCode= \" + props.stateCode);\r\n    super(props);\r\n    this.state = {\r\n      stateCode: props.stateCode,\r\n      state_current: [],\r\n      date_selected: props.dateSelected,\r\n      date_selected_formatted: props.dateSelectedFormatted\r\n    };\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    let url = `https://covidtracking.com/api/states/daily?state=${this.state.stateCode}&date=${this.state.date_selected}`;\r\n    console.log('url:' + url);\r\n    fetch(url)\r\n      .then(res => res.json())\r\n      .then((data) => {\r\n        this.setState({ state_current: data })\r\n        console.log(this.state.state_current)\r\n      })\r\n      .catch(console.log)\r\n  }\r\n\r\n  render() {\r\n    console.log(\"rendering original array\");\r\n    console.log(Object.values(this.state.state_current));\r\n    console.log(\"rendering  array after splice\");\r\n    console.log(Object.values(this.state.state_current).splice(2,6));\r\n\r\n    let myData = {\r\n      labels: ['Positive', 'Negative', 'Pending','Hospitalized',\r\n         'Death', 'Total'],\r\n      datasets: [\r\n        {\r\n          label: '# of people',\r\n          backgroundColor: 'rgba(75,192,192,1)',\r\n          borderColor: 'rgba(0,0,0,1)',\r\n          borderWidth: 2,\r\n          data: Object.values(this.state.state_current).splice(2,6)\r\n        }\r\n      ]\r\n    };\r\n    /*if (!this.state.state_current || !this.state.state_current.length) {\r\n      return \"Loading...\";\r\n    }*/\r\n    return (\r\n      <div>\r\n        <br/>\r\n        <center><h1>State Current Affected List</h1></center>\r\n        <div className=\"card\">\r\n          <div className=\"card-body\">\r\n            <h5 className=\"card-text\">Date:  {this.state.date_selected_formatted}</h5>\r\n            <h5 className=\"card-text\">State:  {this.state.state_current.state}</h5>\r\n            <h5 className=\"card-text\">Positive:  {this.state.state_current.positive}</h5>\r\n            <h5 className=\"card-text\">Negative:  {this.state.state_current.negative}</h5>\r\n            <h5 className=\"card-text\">Pending:  {this.state.state_current.pending}</h5>\r\n            <h5 className=\"card-text\">Deaths:  {this.state.state_current.death}</h5>\r\n            <h5 className=\"card-text\">Total:  {this.state.state_current.total}</h5>\r\n          </div>\r\n        </div>\r\n        <Bar\r\n               data={myData}\r\n               options={{\r\n                 title:{\r\n                   display:true,\r\n                   text:'Covid-19  status for '+this.state.state_current.state+ ' for '+this.state.date_selected_formatted,\r\n                   fontSize:20\r\n                 },\r\n                 legend:{\r\n                   display:true,\r\n                   position:'right'\r\n                 }\r\n               }}\r\n             />\r\n      </div>)\r\n  }\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport default StateCurrentFiltered","import React from 'react'\r\nimport { Bar } from 'react-chartjs-2';\r\nimport Select from 'react-select';\r\nimport * as consts from './constants';\r\nimport StateCurrentFiltered from './stateCurrentFiltered';\r\nimport DatePicker from 'react-datepicker';\r\nimport moment from 'moment';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport addDays from 'date-fns/addDays';\r\nimport './App.css';\r\n\r\nlet states = consts.statesLin.map(e => ({ value: e, label: e }))\r\nlet yesterday = addDays(new Date(), -1)\r\n\r\n\r\nclass StatesCurrent extends React.Component {\r\n\r\n\r\n    constructor(props) {\r\n        console.log(\"constructor called\")\r\n        super(props);\r\n        //let yesterdayFormatted = this.formatDate(this.state.startDate);\r\n        this.state = {\r\n            selectedOption: [],\r\n            startDate: yesterday,\r\n            dateSelectedFormatted: null\r\n        }\r\n\r\n        this.handleDateChange = this.handleDateChange.bind(this);\r\n    };\r\n\r\n\r\n\r\n    handleChange = (selectedOption) => {\r\n        this.setState({ selectedOption });\r\n        console.log(`Option selected:`, selectedOption);\r\n    }\r\n\r\n    formatDate(date) {\r\n        //let dateSelected = moment(startDate).format('YYYYMMDD');\r\n        let dateSelectedFormatted = moment(date).format('MM/DD/YYYY');\r\n        return dateSelectedFormatted;\r\n    }\r\n\r\n    handleDateChange(startDate) {\r\n\r\n        //let dateSelected = new Intl.DateTimeFormat('en-US', { year: 'numeric', month: '2-digit', day: '2-digit' }).format(startDate);\r\n        let dateSelected = moment(startDate).format('YYYYMMDD');\r\n        //let dateSelectedFormatted = moment(startDate).format('MM/DD/YYYY');\r\n        let dateSelectedFormatted = this.formatDate(startDate);\r\n        this.setState({ startDate, dateSelected, dateSelectedFormatted });\r\n        console.log(`formatted date selected:`, dateSelected);\r\n\r\n        console.log(`formatted  with / date selected:`, dateSelectedFormatted);\r\n    }\r\n\r\n    render() {\r\n        console.log('code=' + this.state.selectedOption.value);\r\n        if (!this.state.dateSelected)\r\n            this.state.dateSelected = moment(this.state.startDate).format('YYYYMMDD');\r\n        console.log('date formatted=' + this.state.dateSelected);\r\n        if (!this.state.dateSelectedFormatted)\r\n            this.state.dateSelectedFormatted = this.formatDate(this.state.dateSelected);\r\n        console.log(`render:formatted with / date selected:`, this.state.dateSelectedFormatted);\r\n        // if (this.state.selectedOption === null || !this.state.selectedOption.value ||\r\n        //     !this.state.selectedOption.value.Length)\r\n        return (\r\n            <div>\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <center><h1>Select a state and date</h1></center>\r\n                <div className='row'>\r\n                    <div className=\"col-sm-3\" >\r\n                        <Select\r\n                            autosize={true} onChange={this.handleChange} options={states}\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-sm-4\" >\r\n                        <DatePicker\r\n                            placeholderText=\"Click to select a date\"\r\n                            selected={this.state.startDate}\r\n                            onChange={this.handleDateChange}\r\n                            name=\"selectedDate\"\r\n                            dateFormat=\"MM/dd/yyyy\"\r\n                            maxDate={yesterday}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                {this.state.selectedOption && this.state.selectedOption.value &&\r\n                    //this.state.dateSelectedFormatted &&\r\n                    <StateCurrentFiltered key={this.state.selectedOption.value + \",\" + this.state.dateSelectedFormatted}\r\n                        stateCode={this.state.selectedOption.value}\r\n                        dateSelected={this.state.dateSelected}\r\n                        dateSelectedFormatted={this.state.dateSelectedFormatted} />}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StatesCurrent","import React from 'react';\r\n\r\nexport const statesLin = [\r\n    'AK',\r\n    'AL',\r\n    'AR',\r\n    'AS',\r\n    'AZ',\r\n    'CA',\r\n    'CO',\r\n    'CT',\r\n    'DC',\r\n    'DE',\r\n    'FL',\r\n    'GA',\r\n    'GU',\r\n    'HI',\r\n    'IA',\r\n    'ID',\r\n    'IL',\r\n    'IN',\r\n    'KS',\r\n    'KY',\r\n    'LA',\r\n    'MA',\r\n    'MD',\r\n    'ME',\r\n    'MI',\r\n    'MN',\r\n    'MO',\r\n    'MP',\r\n    'MS',\r\n    'MT',\r\n    'NC',\r\n    'ND',\r\n    'NE',\r\n    'NH',\r\n    'NJ',\r\n    'NM',\r\n    'NV',\r\n    'NY',\r\n    'OH',\r\n    'OK',\r\n    'OR',\r\n    'PA',\r\n    'PR',\r\n    'RI',\r\n    'SC',\r\n    'SD',\r\n    'TN',\r\n    'TX',\r\n    'UT',\r\n    'VA',\r\n    'VI',\r\n    'VT',\r\n    'WA',\r\n    'WI',\r\n    'WV',\r\n    'WY'\r\n]\r\n\r\n//export default Constants;\r\n","import React, { Component } from 'react';\nimport UsCurrent from './components/usCurrent';\nimport StatesCurrent from './components/statesCurrent';\nimport Select from 'react-select';\n\nconst options = [\n  { value: 'usCurrentAffected', label: 'US Current Affected List' },\n  { value: 'statesDailyAffected', label: 'States Daily Affected List' }\n\n];\n\nclass App extends Component {\n\n  state = {\n    selectedOption: null\n  }\n  handleChange = (selectedOption) => {\n    this.setState({ selectedOption });\n    console.log(`Option selected:`, selectedOption);\n\n  }\n\n   render() {\n    if (this.state.selectedOption === null || !this.state.selectedOption.value ||\n      !this.state.selectedOption.value.Length)\n      return (\n        <div>\n          <center><h1>US Covid-19 Status</h1></center>\n          <center><h1>Select an option</h1></center>\n          <Select className=\"col-sm-5\"\n            onChange={this.handleChange}\n            options={options} />\n\n          {this.state.selectedOption && this.state.selectedOption.value == 'usCurrentAffected' &&\n            <UsCurrent />}\n           {this.state.selectedOption && this.state.selectedOption.value == 'statesDailyAffected' &&\n            <StatesCurrent />}\n      </div>);\n    }\n\n\n\n}\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}