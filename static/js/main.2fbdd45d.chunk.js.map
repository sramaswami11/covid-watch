{"version":3,"sources":["components/usCurrent.js","components/stateCurrentFiltered.js","components/statesCurrent.js","components/constants.js","App.js","serviceWorker.js","index.js"],"names":["UsCurrent","props","state","us_current","fetch","then","res","json","data","setState","catch","console","log","this","length","myData","labels","datasets","label","backgroundColor","borderColor","borderWidth","Object","values","map","affected","className","positive","negative","death","total","options","title","display","text","fontSize","legend","position","React","Component","StateCurrentFiltered","stateCode","state_current","date_selected","dateSelected","date_selected_formatted","dateSelectedFormatted","url","splice","error","pending","states","e","value","StatesCurrent","handleChange","selectedOption","startDate","Date","handleDateChange","bind","date","moment","format","formatDate","autosize","onChange","placeholderText","selected","name","dateFormat","maxDate","key","App","Length","style","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.2fbdd45d.chunk.js","sourcesContent":["// src/components/usCurrent.js\r\n\r\nimport React from 'react'\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nclass UsCurrent extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      us_current: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://covidtracking.com/api/us')\r\n      .then(res => res.json())\r\n      .then((data) => {\r\n        this.setState({ us_current: data })\r\n        })\r\n      .catch(console.log)\r\n  }\r\n\r\n  render() {\r\n    // console.log( Object.values(this.props.us_current[0]));\r\n    if (!this.state.us_current || !this.state.us_current.length) {\r\n      return \"Loading...\";\r\n    }\r\n    let myData = {\r\n      labels: ['Positive', 'Negative', 'PosNegative',\r\n        'Pending', 'Death', 'Total'],\r\n      datasets: [\r\n        {\r\n          label: '# of people',\r\n          backgroundColor: 'rgba(75,192,192,1)',\r\n          borderColor: 'rgba(0,0,0,1)',\r\n          borderWidth: 2,\r\n          data: Object.values(this.state.us_current[0])\r\n        }\r\n      ]\r\n    };\r\n    return (\r\n      <div>\r\n        <center><h1>US Current Affected List</h1></center>\r\n        {this.state.us_current.map((affected) => (\r\n          <div className=\"card\">\r\n            <div className=\"card-body\">\r\n              <h5 className=\"card-text\">Positive:  {affected.positive}</h5>\r\n              <h5 className=\"card-text\">Negative:  {affected.negative}</h5>\r\n              <h5 className=\"card-text\">Death:  {affected.death}</h5>\r\n              <h5 className=\"card-text\">Total:  {affected.total}</h5>\r\n            </div>\r\n          </div>\r\n        ))}\r\n\r\n        <Bar\r\n          data={myData}\r\n          options={{\r\n            title: {\r\n              display: true,\r\n              text: 'Covid-19 current status',\r\n              fontSize: 20\r\n            },\r\n            legend: {\r\n              display: true,\r\n              position: 'right'\r\n            }\r\n          }}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default UsCurrent","import React from 'react'\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nclass StateCurrentFiltered extends React.Component {\r\n  constructor(props) {\r\n    console.log(\"constructor called,with stateCode= \" + props.stateCode);\r\n    super(props);\r\n    this.state = {\r\n      stateCode: props.stateCode,\r\n      state_current: [],\r\n      date_selected: props.dateSelected,\r\n      date_selected_formatted: props.dateSelectedFormatted\r\n    };\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    let url = `https://covidtracking.com/api/states/daily?state=${this.state.stateCode}&date=${this.state.date_selected}`;\r\n    console.log('url:' + url);\r\n    fetch(url)\r\n      .then(res => res.json())\r\n      .then((data) => {\r\n        this.setState({ state_current: data })\r\n      })\r\n      .catch(console.log)\r\n  }\r\n\r\n  render() {\r\n\r\n    let myData = {\r\n      labels: ['Positive', 'Negative', 'Pending', 'Hospitalized',\r\n        'Death', 'Total'],\r\n      datasets: [\r\n        {\r\n          label: '# of people',\r\n          backgroundColor: 'rgba(75,192,192,1)',\r\n          borderColor: 'rgba(0,0,0,1)',\r\n          borderWidth: 2,\r\n          data: Object.values(this.state.state_current).splice(2, 6)\r\n        }\r\n      ]\r\n    };\r\n    console.log(this.state.state_current);\r\n    if (!this.state.state_current || this.state.state_current.error === true) {\r\n      return \"No data is available. Please change the search criteria and try again\";\r\n    }\r\n    return (\r\n      <div>\r\n        <br />\r\n        <center><h1>Current Affected List for {this.state.state_current.state} for {this.state.date_selected_formatted}</h1></center>\r\n        <div className=\"card\">\r\n          <div className=\"card-body\">\r\n            <h5 className=\"card-text\">Date:  {this.state.date_selected_formatted}</h5>\r\n            <h5 className=\"card-text\">State:  {this.state.state_current.state}</h5>\r\n            <h5 className=\"card-text\">Positive:  {this.state.state_current.positive}</h5>\r\n            <h5 className=\"card-text\">Negative:  {this.state.state_current.negative}</h5>\r\n            {this.state.state_current.pending != null &&\r\n            <h5 className=\"card-text\">Pending:  {this.state.state_current.pending}</h5>}\r\n            <h5 className=\"card-text\">Deaths:  {this.state.state_current.death}</h5>\r\n            <h5 className=\"card-text\">Total:  {this.state.state_current.total}</h5>\r\n          </div>\r\n        </div>\r\n        <Bar\r\n          data={myData}\r\n          options={{\r\n            title: {\r\n              display: true,\r\n              text: 'Covid-19  status for ' + this.state.state_current.state + ' as of  ' + this.state.date_selected_formatted,\r\n              fontSize: 20\r\n            },\r\n            legend: {\r\n              display: true,\r\n              position: 'right'\r\n            }\r\n          }}\r\n        />\r\n      </div>)\r\n  }\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport default StateCurrentFiltered","import React from 'react'\r\nimport Select from 'react-select';\r\nimport * as consts from './constants';\r\nimport StateCurrentFiltered from './stateCurrentFiltered';\r\nimport DatePicker from 'react-datepicker';\r\nimport moment from 'moment';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport './App.css';\r\n\r\nlet states = consts.statesLin.map(e => ({ value: e, label: e }))\r\n\r\nclass StatesCurrent extends React.Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selectedOption: [],\r\n            startDate: new Date(),\r\n            dateSelectedFormatted: null\r\n        }\r\n\r\n        this.handleDateChange = this.handleDateChange.bind(this);\r\n    };\r\n\r\n\r\n\r\n    handleChange = (selectedOption) => {\r\n        this.setState({ selectedOption });\r\n\r\n    }\r\n\r\n    formatDate(date) {\r\n        let dateSelectedFormatted = moment(date).format('MM/DD/YYYY');\r\n        return dateSelectedFormatted;\r\n    }\r\n\r\n    handleDateChange(startDate) {\r\n\r\n        let dateSelected = moment(startDate).format('YYYYMMDD');\r\n        let dateSelectedFormatted = this.formatDate(startDate);\r\n        this.setState({ startDate, dateSelected, dateSelectedFormatted });\r\n\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.dateSelected)\r\n            this.setState({ dateSelected: moment(this.state.startDate).format('YYYYMMDD') });\r\n\r\n        if (!this.state.dateSelectedFormatted)\r\n            this.setState({ dateSelectedFormatted: this.formatDate(this.state.dateSelected) });\r\n\r\n\r\n        return (\r\n            <div>\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <center><h1>Select a state and date</h1></center>\r\n                <div className='row'>\r\n                    <div className=\"col-sm-3\" >\r\n                        <Select\r\n                            autosize={true} onChange={this.handleChange} options={states}\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-sm-4\" >\r\n                        <DatePicker\r\n                            placeholderText=\"Click to select a date\"\r\n                            selected={this.state.startDate}\r\n                            onChange={this.handleDateChange}\r\n                            name=\"selectedDate\"\r\n                            dateFormat=\"MM/dd/yyyy\"\r\n                            maxDate={new Date()}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                {this.state.selectedOption && this.state.selectedOption.value &&\r\n                    <StateCurrentFiltered key={this.state.selectedOption.value + \",\" + this.state.dateSelectedFormatted}\r\n                        stateCode={this.state.selectedOption.value}\r\n                        dateSelected={this.state.dateSelected}\r\n                        dateSelectedFormatted={this.state.dateSelectedFormatted} />}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StatesCurrent","//import React from 'react';\r\n\r\nexport const statesLin = [\r\n    'AK',\r\n    'AL',\r\n    'AR',\r\n    'AS',\r\n    'AZ',\r\n    'CA',\r\n    'CO',\r\n    'CT',\r\n    'DC',\r\n    'DE',\r\n    'FL',\r\n    'GA',\r\n    'GU',\r\n    'HI',\r\n    'IA',\r\n    'ID',\r\n    'IL',\r\n    'IN',\r\n    'KS',\r\n    'KY',\r\n    'LA',\r\n    'MA',\r\n    'MD',\r\n    'ME',\r\n    'MI',\r\n    'MN',\r\n    'MO',\r\n    'MP',\r\n    'MS',\r\n    'MT',\r\n    'NC',\r\n    'ND',\r\n    'NE',\r\n    'NH',\r\n    'NJ',\r\n    'NM',\r\n    'NV',\r\n    'NY',\r\n    'OH',\r\n    'OK',\r\n    'OR',\r\n    'PA',\r\n    'PR',\r\n    'RI',\r\n    'SC',\r\n    'SD',\r\n    'TN',\r\n    'TX',\r\n    'UT',\r\n    'VA',\r\n    'VI',\r\n    'VT',\r\n    'WA',\r\n    'WI',\r\n    'WV',\r\n    'WY'\r\n]\r\n\r\n//export default Constants;\r\n","import React, { Component } from 'react';\nimport UsCurrent from './components/usCurrent';\nimport StatesCurrent from './components/statesCurrent';\nimport Select from 'react-select';\n\nconst options = [\n  { value: 'usCurrentAffected', label: 'US Current Affected List' },\n  { value: 'statesDailyAffected', label: 'States Daily Affected List' }\n\n];\n\nconst disclaimer = 'The information presented on this website is for general informational purposes only. \\\nThe data is being pulled using third party Application Programming Interfaces (APIs) and hence all the \\\ninformation on this site is provided in good faith, so we make no representation on warranty, adequecy, \\\nvalidity, reliability or completeness of any information on this site.';\n\nclass App extends Component {\n\n  state = {\n    selectedOption: null\n  }\n  handleChange = (selectedOption) => {\n    this.setState({ selectedOption });\n    console.log(`Option selected:`, selectedOption);\n\n  }\n\n   render() {\n    if (this.state.selectedOption === null || !this.state.selectedOption.value ||\n      !this.state.selectedOption.value.Length)\n      return (\n        <div className=\"container\"\n        style={{\n          backgroundColor: 'lightblue'\n          \n        }}\n        >\n          <center><h1>US Covid-19 Status</h1></center>\n          <center><h1>Select an option</h1></center>\n          <Select className=\"col-sm-5\"\n            onChange={this.handleChange}\n            options={options} />\n\n          {this.state.selectedOption && this.state.selectedOption.value === 'usCurrentAffected' &&\n            <UsCurrent />}\n           {this.state.selectedOption && this.state.selectedOption.value === 'statesDailyAffected' &&\n            <StatesCurrent />}\n            <br/>\n            <h7>{disclaimer} </h7>\n            \n      </div>);\n    }\n\n\n\n}\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}